---
title: "Workout analysis"
toc: true
toc-depth: 3
format:
  html:
    html-math-method: katex
    responsive: true
    self-contained: true
    output-file: "index"
execute:
  warning: false
  echo: false
  freeze: auto
---

<script>
  // Fonction pour détecter la taille de l'écran et ajuster la largeur du graphique
  function adjustHighchartsWidth() {
    var chartContainer = document.getElementById("mon-graphique"); // Remplacez "votre-container-de-graphique" par l'ID de votre conteneur de graphique
    var windowWidth = window.innerWidth;

    if (windowWidth <= 767) {
      // Largeur inférieure ou égale à 767 pixels, probablement un appareil mobile
      chartContainer.style.width = "100%"; // Ajuster la largeur du conteneur du graphique à 100%
    } else {
      // Largeur supérieure à 767 pixels, probablement un ordinateur
      chartContainer.style.width = "100%"; // Ajuster la largeur du conteneur du graphique à 600 pixels (ou à la valeur souhaitée pour les ordinateurs)
    }
  }

  // Appeler la fonction d'ajustement de la largeur lors du chargement de la page et du redimensionnement de la fenêtre
  document.addEventListener("DOMContentLoaded", adjustHighchartsWidth);
  window.addEventListener("resize", adjustHighchartsWidth);
</script>



## Beta version

```{r}
library(googlesheets4)
library(here)
library(highcharter)
library(gt)
library(gtExtras)

gs4_deauth()

source(here('functions.R'))

#Read google sheets data into R
df <- read_sheet('https://docs.google.com/spreadsheets/d/1t7HI7_cj0mcXJ_FD4tC8D1PVJFXoHDsaM9NSqX5sk1s/edit?usp=sharing')

# Appliquer la fonction pour séparer les valeurs
donnees_separees <- separer_valeurs(df, "Répétitions")
donnees_separees <- separer_valeurs(donnees_separees, "Poids")

# Convertir les données en lignes
data <- donnees_separees %>%
  pivot_longer(cols = starts_with(c("Répétitions", "Poids")), 
               names_to = c(".value", "série"),
               names_pattern = "([^_]+)_(\\d+)") %>% 
  na.omit()

df_high_date = data %>%
  group_by(Date) %>%
  summarise(exercices = n_distinct(Exercice, na.rm = T),
            series = n(),
            repetitions = sum(Répétitions, na.rm = T),
            poids = sum(Poids, na.rm = T)) %>%
  ungroup() %>%
  pivot_longer(!c(Date, poids), names_to = 'gr', values_to = 'value') %>% 
  mutate(Date = as.Date(Date))

```


## Suivi général

<div id="mon-graphique">

```{r}
highchart()%>%
  hc_xAxis(type = "datetime", labels = list(format = '{value:%m/%d}')) %>%
  hc_yAxis_multiples(list(title = list(text = "Exercices / Séries"),
                          labels=list(format = '{value}'),
                          showFirstLabel = TRUE,
                          showLastLabel=TRUE,
                          opposite = FALSE),
                     list(title = list(text = "Charges (Kg)"),
                          labels = list(format = "{value}"),showLastLabel = FALSE, opposite = TRUE)) %>%
  hc_plotOptions(column = list(stacking = "normal")) %>%
  hc_add_series(df_high_date,type="column",hcaes(x=Date,y=value, group = 'gr'),yAxis=0) %>%
  hc_add_series(df_high_date,type="line",hcaes(x=Date,y=poids), yAxis = 1, name = 'Charge',  color = 'orange') 

```

</div>

## Répartition des exercices

```{r}
df_high_ex_rep = data %>%
  group_by(Exercice) %>%
  summarise(repetitions = sum(Répétitions, na.rm = T)) %>%
  ungroup() 

df_high_ex_poids = data %>%
  group_by(Exercice) %>%
  summarise(poids = sum(Poids, na.rm = T)) %>%
  ungroup() 

```

::: {layout-ncol=2 .column-page}

```{r}
highchart() %>%
  hc_chart(type = "pie") %>%
  hc_title(text = "Répartition des Répétitions par Exercice") %>%
  hc_plotOptions(pie = list(
    allowPointSelect = TRUE,
    cursor = "pointer",
    dataLabels = list(enabled = TRUE, format = "<b>{point.name}</b>: {point.percentage:.1f}%")
  )) %>%
  hc_add_series(data = df_high_ex_rep,hcaes(x=Exercice,y=repetitions), type = "pie", name = "Exercice", dataLabels = list(enabled = TRUE, format = "<b>{point.name}</b>: {point.percentage:.1f}%")) 

```


```{r}
highchart() %>%
  hc_chart(type = "pie") %>%
  hc_title(text = "Répartition des poids par Exercice") %>%
  hc_plotOptions(pie = list(
    allowPointSelect = TRUE,
    cursor = "pointer",
    dataLabels = list(enabled = TRUE, format = "<b>{point.name}</b>: {point.percentage:.1f}%")
  )) %>%
  hc_add_series(data = df_high_ex_poids,hcaes(x=Exercice,y=poids), type = "pie", name = "Exercice", dataLabels = list(enabled = TRUE, format = "<b>{point.name}</b>: {point.percentage:.1f}%")) 

```

:::

## Tableau des max

<div id="mon-graphique">

```{r}
averages <- data %>%
      group_by(Exercice, Répétitions) %>%
      summarise(max = max(Poids, na.rm = T)) %>%
      ungroup() %>%
      mutate(max_estimated = round(max / (1.0279 - (0.0278*Répétitions)),1)) %>%
      group_by(Exercice) %>%
      summarise(max = max(max_estimated, na.rm = T)) %>%
      ungroup() %>%
      mutate('90%' = max*0.9,
             '80%' = max*0.8,
             '70%' = max*0.7,
             '60%' = max*0.6,
             '50%' = max*0.5,
             '40%' = max*0.4,
             '30%' = max*0.3,
             '20%' = max*0.2
      )

averages %>% 
  gt() %>% 
  gt_theme_espn() %>% 
  gt_highlight_cols(columns = 1) %>% 
  gt_highlight_cols(columns = 2, alpha = 0.4)

```


</div>

## Evolution des exercices

```{r}

gethc <- function(i) {
  
  # cat("### Exercice ", i, "\n\n")
  
  df_high_date_filter = data %>%
  filter(Exercice == i) %>% 
  group_by(Date) %>%
  summarise(series = n(),
            repetitions = sum(Répétitions, na.rm = T),
            poids = sum(Poids, na.rm = T),
            Max_1RM = max(calculer_1RM(Poids, Répétitions))) %>%
  ungroup() %>%
  pivot_longer(!c(Date, poids, Max_1RM), names_to = 'gr', values_to = 'value') %>% 
  mutate(Date = as.Date(Date))

  hc <- highchart() %>%
  hc_xAxis(type = "datetime", labels = list(format = '{value:%m/%d}')) %>%
  hc_yAxis_multiples(list(title = list(text = "Exercices / Séries"),
                          labels=list(format = '{value}'),
                          showFirstLabel = TRUE,
                          showLastLabel=TRUE,
                          opposite = FALSE),
                     list(title = list(text = "Charges (Kg)"),
                          labels = list(format = "{value}"),showLastLabel = FALSE, opposite = TRUE)) %>%
  # hc_plotOptions(column = list(stacking = "normal")) %>%
  hc_add_series(df_high_date_filter,type="column",hcaes(x=Date,y=value, group = 'gr'),yAxis=0) %>%
  hc_add_series(df_high_date_filter,type="line",hcaes(x=Date,y=poids), yAxis = 1, name = 'Charge') %>% 
  hc_add_series(df_high_date_filter,type="line",hcaes(x=Date,y=Max_1RM), yAxis = 1, name = '1 RM') 
  hc
  
  # cat("\n\n")
}

list_of_highcharts <- list()

for (i in unique(data$Exercice)) {
  
  list_of_highcharts[[i]] <- gethc(i)
  
}

tgls <- list()

for(i in unique(data$Exercice)){
  tgls[[i]] <- list(tags$h3(i),
                    tags$div(id = 'mon-graphique',
                             # tags$figure(list_of_highcharts[[i]]))
                             list_of_highcharts[[i]])
                    )
  }


htmltools::tagList(tgls)


```
